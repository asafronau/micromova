// source: requests.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var exam_pb = require('./exam_pb.js');
goog.object.extend(proto, exam_pb);
var language_pb = require('./language_pb.js');
goog.object.extend(proto, language_pb);
var phrase_pb = require('./phrase_pb.js');
goog.object.extend(proto, phrase_pb);
goog.exportSymbol('proto.micromova.proto.AddPhraseRequest', null, global);
goog.exportSymbol('proto.micromova.proto.AddPhraseResponse', null, global);
goog.exportSymbol('proto.micromova.proto.ApplyExamResultRequest', null, global);
goog.exportSymbol('proto.micromova.proto.CreateCollectionRequest', null, global);
goog.exportSymbol('proto.micromova.proto.CreateCollectionResponse', null, global);
goog.exportSymbol('proto.micromova.proto.GenerateExamRequest', null, global);
goog.exportSymbol('proto.micromova.proto.GenerateExamResponse', null, global);
goog.exportSymbol('proto.micromova.proto.LoadCollectionRequest', null, global);
goog.exportSymbol('proto.micromova.proto.LoadCollectionResponse', null, global);
goog.exportSymbol('proto.micromova.proto.LoadCollectionsRequest', null, global);
goog.exportSymbol('proto.micromova.proto.LoadCollectionsResponse', null, global);
goog.exportSymbol('proto.micromova.proto.LoadPhraseRequest', null, global);
goog.exportSymbol('proto.micromova.proto.LoadPhraseResponse', null, global);
goog.exportSymbol('proto.micromova.proto.RemovePhraseRequest', null, global);
goog.exportSymbol('proto.micromova.proto.RemovePhraseResponse', null, global);
goog.exportSymbol('proto.micromova.proto.UpdateCollectionRequest', null, global);
goog.exportSymbol('proto.micromova.proto.UpdateCollectionResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.CreateCollectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.CreateCollectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.CreateCollectionRequest.displayName = 'proto.micromova.proto.CreateCollectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.CreateCollectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.CreateCollectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.CreateCollectionResponse.displayName = 'proto.micromova.proto.CreateCollectionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.GenerateExamRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.GenerateExamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.GenerateExamRequest.displayName = 'proto.micromova.proto.GenerateExamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.GenerateExamResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.GenerateExamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.GenerateExamResponse.displayName = 'proto.micromova.proto.GenerateExamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.ApplyExamResultRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.micromova.proto.ApplyExamResultRequest.repeatedFields_, null);
};
goog.inherits(proto.micromova.proto.ApplyExamResultRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.ApplyExamResultRequest.displayName = 'proto.micromova.proto.ApplyExamResultRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.AddPhraseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.AddPhraseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.AddPhraseRequest.displayName = 'proto.micromova.proto.AddPhraseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.AddPhraseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.AddPhraseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.AddPhraseResponse.displayName = 'proto.micromova.proto.AddPhraseResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.LoadCollectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.LoadCollectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.LoadCollectionRequest.displayName = 'proto.micromova.proto.LoadCollectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.LoadCollectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.LoadCollectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.LoadCollectionResponse.displayName = 'proto.micromova.proto.LoadCollectionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.LoadCollectionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.LoadCollectionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.LoadCollectionsRequest.displayName = 'proto.micromova.proto.LoadCollectionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.LoadCollectionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.micromova.proto.LoadCollectionsResponse.repeatedFields_, null);
};
goog.inherits(proto.micromova.proto.LoadCollectionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.LoadCollectionsResponse.displayName = 'proto.micromova.proto.LoadCollectionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.UpdateCollectionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.UpdateCollectionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.UpdateCollectionRequest.displayName = 'proto.micromova.proto.UpdateCollectionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.UpdateCollectionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.UpdateCollectionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.UpdateCollectionResponse.displayName = 'proto.micromova.proto.UpdateCollectionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.LoadPhraseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.LoadPhraseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.LoadPhraseRequest.displayName = 'proto.micromova.proto.LoadPhraseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.LoadPhraseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.LoadPhraseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.LoadPhraseResponse.displayName = 'proto.micromova.proto.LoadPhraseResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.RemovePhraseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.RemovePhraseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.RemovePhraseRequest.displayName = 'proto.micromova.proto.RemovePhraseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.RemovePhraseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.RemovePhraseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.RemovePhraseResponse.displayName = 'proto.micromova.proto.RemovePhraseResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.CreateCollectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.CreateCollectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.CreateCollectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.CreateCollectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sourceLanguage: jspb.Message.getFieldWithDefault(msg, 2, 0),
    translationLanguage: jspb.Message.getFieldWithDefault(msg, 3, 0),
    discoverPoints: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.CreateCollectionRequest}
 */
proto.micromova.proto.CreateCollectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.CreateCollectionRequest;
  return proto.micromova.proto.CreateCollectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.CreateCollectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.CreateCollectionRequest}
 */
proto.micromova.proto.CreateCollectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.micromova.proto.Language} */ (reader.readEnum());
      msg.setSourceLanguage(value);
      break;
    case 3:
      var value = /** @type {!proto.micromova.proto.Language} */ (reader.readEnum());
      msg.setTranslationLanguage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiscoverPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.CreateCollectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.CreateCollectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.CreateCollectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.CreateCollectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSourceLanguage();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTranslationLanguage();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getDiscoverPoints();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.micromova.proto.CreateCollectionRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.CreateCollectionRequest} returns this
 */
proto.micromova.proto.CreateCollectionRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Language source_language = 2;
 * @return {!proto.micromova.proto.Language}
 */
proto.micromova.proto.CreateCollectionRequest.prototype.getSourceLanguage = function() {
  return /** @type {!proto.micromova.proto.Language} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.micromova.proto.Language} value
 * @return {!proto.micromova.proto.CreateCollectionRequest} returns this
 */
proto.micromova.proto.CreateCollectionRequest.prototype.setSourceLanguage = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Language translation_language = 3;
 * @return {!proto.micromova.proto.Language}
 */
proto.micromova.proto.CreateCollectionRequest.prototype.getTranslationLanguage = function() {
  return /** @type {!proto.micromova.proto.Language} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.micromova.proto.Language} value
 * @return {!proto.micromova.proto.CreateCollectionRequest} returns this
 */
proto.micromova.proto.CreateCollectionRequest.prototype.setTranslationLanguage = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 discover_points = 4;
 * @return {number}
 */
proto.micromova.proto.CreateCollectionRequest.prototype.getDiscoverPoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.CreateCollectionRequest} returns this
 */
proto.micromova.proto.CreateCollectionRequest.prototype.setDiscoverPoints = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.CreateCollectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.CreateCollectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.CreateCollectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.CreateCollectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: (f = msg.getCollection()) && phrase_pb.CollectionView.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.CreateCollectionResponse}
 */
proto.micromova.proto.CreateCollectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.CreateCollectionResponse;
  return proto.micromova.proto.CreateCollectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.CreateCollectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.CreateCollectionResponse}
 */
proto.micromova.proto.CreateCollectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new phrase_pb.CollectionView;
      reader.readMessage(value,phrase_pb.CollectionView.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.CreateCollectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.CreateCollectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.CreateCollectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.CreateCollectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      phrase_pb.CollectionView.serializeBinaryToWriter
    );
  }
};


/**
 * optional CollectionView collection = 1;
 * @return {?proto.micromova.proto.CollectionView}
 */
proto.micromova.proto.CreateCollectionResponse.prototype.getCollection = function() {
  return /** @type{?proto.micromova.proto.CollectionView} */ (
    jspb.Message.getWrapperField(this, phrase_pb.CollectionView, 1));
};


/**
 * @param {?proto.micromova.proto.CollectionView|undefined} value
 * @return {!proto.micromova.proto.CreateCollectionResponse} returns this
*/
proto.micromova.proto.CreateCollectionResponse.prototype.setCollection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.micromova.proto.CreateCollectionResponse} returns this
 */
proto.micromova.proto.CreateCollectionResponse.prototype.clearCollection = function() {
  return this.setCollection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.micromova.proto.CreateCollectionResponse.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.GenerateExamRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.GenerateExamRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.GenerateExamRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.GenerateExamRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    collectionName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timezone: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.GenerateExamRequest}
 */
proto.micromova.proto.GenerateExamRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.GenerateExamRequest;
  return proto.micromova.proto.GenerateExamRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.GenerateExamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.GenerateExamRequest}
 */
proto.micromova.proto.GenerateExamRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimezone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.GenerateExamRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.GenerateExamRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.GenerateExamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.GenerateExamRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimezone();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string collection_name = 1;
 * @return {string}
 */
proto.micromova.proto.GenerateExamRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.GenerateExamRequest} returns this
 */
proto.micromova.proto.GenerateExamRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string timezone = 2;
 * @return {string}
 */
proto.micromova.proto.GenerateExamRequest.prototype.getTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.GenerateExamRequest} returns this
 */
proto.micromova.proto.GenerateExamRequest.prototype.setTimezone = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.GenerateExamResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.GenerateExamResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.GenerateExamResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.GenerateExamResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    exam: (f = msg.getExam()) && exam_pb.Exam.toObject(includeInstance, f),
    todayScore: jspb.Message.getFieldWithDefault(msg, 2, 0),
    todayDiscoveredPhrases: jspb.Message.getFieldWithDefault(msg, 3, 0),
    weekDiscoveredPhrases: jspb.Message.getFieldWithDefault(msg, 4, 0),
    starScoreMillis: jspb.Message.getFieldWithDefault(msg, 5, 0),
    totalOpenedPhrases: jspb.Message.getFieldWithDefault(msg, 6, 0),
    totalUndiscoveredPhrases: jspb.Message.getFieldWithDefault(msg, 7, 0),
    uniquePhrasesToday: jspb.Message.getFieldWithDefault(msg, 8, 0),
    uniquePhrasesWeek: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.GenerateExamResponse}
 */
proto.micromova.proto.GenerateExamResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.GenerateExamResponse;
  return proto.micromova.proto.GenerateExamResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.GenerateExamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.GenerateExamResponse}
 */
proto.micromova.proto.GenerateExamResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new exam_pb.Exam;
      reader.readMessage(value,exam_pb.Exam.deserializeBinaryFromReader);
      msg.setExam(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTodayScore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTodayDiscoveredPhrases(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWeekDiscoveredPhrases(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStarScoreMillis(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalOpenedPhrases(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalUndiscoveredPhrases(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUniquePhrasesToday(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUniquePhrasesWeek(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.GenerateExamResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.GenerateExamResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.GenerateExamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.GenerateExamResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExam();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      exam_pb.Exam.serializeBinaryToWriter
    );
  }
  f = message.getTodayScore();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTodayDiscoveredPhrases();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getWeekDiscoveredPhrases();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getStarScoreMillis();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getTotalOpenedPhrases();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getTotalUndiscoveredPhrases();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getUniquePhrasesToday();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getUniquePhrasesWeek();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional Exam exam = 1;
 * @return {?proto.micromova.proto.Exam}
 */
proto.micromova.proto.GenerateExamResponse.prototype.getExam = function() {
  return /** @type{?proto.micromova.proto.Exam} */ (
    jspb.Message.getWrapperField(this, exam_pb.Exam, 1));
};


/**
 * @param {?proto.micromova.proto.Exam|undefined} value
 * @return {!proto.micromova.proto.GenerateExamResponse} returns this
*/
proto.micromova.proto.GenerateExamResponse.prototype.setExam = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.micromova.proto.GenerateExamResponse} returns this
 */
proto.micromova.proto.GenerateExamResponse.prototype.clearExam = function() {
  return this.setExam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.micromova.proto.GenerateExamResponse.prototype.hasExam = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 today_score = 2;
 * @return {number}
 */
proto.micromova.proto.GenerateExamResponse.prototype.getTodayScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.GenerateExamResponse} returns this
 */
proto.micromova.proto.GenerateExamResponse.prototype.setTodayScore = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 today_discovered_phrases = 3;
 * @return {number}
 */
proto.micromova.proto.GenerateExamResponse.prototype.getTodayDiscoveredPhrases = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.GenerateExamResponse} returns this
 */
proto.micromova.proto.GenerateExamResponse.prototype.setTodayDiscoveredPhrases = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 week_discovered_phrases = 4;
 * @return {number}
 */
proto.micromova.proto.GenerateExamResponse.prototype.getWeekDiscoveredPhrases = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.GenerateExamResponse} returns this
 */
proto.micromova.proto.GenerateExamResponse.prototype.setWeekDiscoveredPhrases = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 star_score_millis = 5;
 * @return {number}
 */
proto.micromova.proto.GenerateExamResponse.prototype.getStarScoreMillis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.GenerateExamResponse} returns this
 */
proto.micromova.proto.GenerateExamResponse.prototype.setStarScoreMillis = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 total_opened_phrases = 6;
 * @return {number}
 */
proto.micromova.proto.GenerateExamResponse.prototype.getTotalOpenedPhrases = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.GenerateExamResponse} returns this
 */
proto.micromova.proto.GenerateExamResponse.prototype.setTotalOpenedPhrases = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 total_undiscovered_phrases = 7;
 * @return {number}
 */
proto.micromova.proto.GenerateExamResponse.prototype.getTotalUndiscoveredPhrases = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.GenerateExamResponse} returns this
 */
proto.micromova.proto.GenerateExamResponse.prototype.setTotalUndiscoveredPhrases = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 unique_phrases_today = 8;
 * @return {number}
 */
proto.micromova.proto.GenerateExamResponse.prototype.getUniquePhrasesToday = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.GenerateExamResponse} returns this
 */
proto.micromova.proto.GenerateExamResponse.prototype.setUniquePhrasesToday = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 unique_phrases_week = 9;
 * @return {number}
 */
proto.micromova.proto.GenerateExamResponse.prototype.getUniquePhrasesWeek = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.GenerateExamResponse} returns this
 */
proto.micromova.proto.GenerateExamResponse.prototype.setUniquePhrasesWeek = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.micromova.proto.ApplyExamResultRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.ApplyExamResultRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.ApplyExamResultRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.ApplyExamResultRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.ApplyExamResultRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskResultsList: jspb.Message.toObjectList(msg.getTaskResultsList(),
    exam_pb.TaskResult.toObject, includeInstance),
    collectionName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timezone: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.ApplyExamResultRequest}
 */
proto.micromova.proto.ApplyExamResultRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.ApplyExamResultRequest;
  return proto.micromova.proto.ApplyExamResultRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.ApplyExamResultRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.ApplyExamResultRequest}
 */
proto.micromova.proto.ApplyExamResultRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new exam_pb.TaskResult;
      reader.readMessage(value,exam_pb.TaskResult.deserializeBinaryFromReader);
      msg.addTaskResults(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimezone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.ApplyExamResultRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.ApplyExamResultRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.ApplyExamResultRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.ApplyExamResultRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTaskResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      exam_pb.TaskResult.serializeBinaryToWriter
    );
  }
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimezone();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated TaskResult task_results = 1;
 * @return {!Array<!proto.micromova.proto.TaskResult>}
 */
proto.micromova.proto.ApplyExamResultRequest.prototype.getTaskResultsList = function() {
  return /** @type{!Array<!proto.micromova.proto.TaskResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, exam_pb.TaskResult, 1));
};


/**
 * @param {!Array<!proto.micromova.proto.TaskResult>} value
 * @return {!proto.micromova.proto.ApplyExamResultRequest} returns this
*/
proto.micromova.proto.ApplyExamResultRequest.prototype.setTaskResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.micromova.proto.TaskResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.micromova.proto.TaskResult}
 */
proto.micromova.proto.ApplyExamResultRequest.prototype.addTaskResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.micromova.proto.TaskResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.micromova.proto.ApplyExamResultRequest} returns this
 */
proto.micromova.proto.ApplyExamResultRequest.prototype.clearTaskResultsList = function() {
  return this.setTaskResultsList([]);
};


/**
 * optional string collection_name = 2;
 * @return {string}
 */
proto.micromova.proto.ApplyExamResultRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.ApplyExamResultRequest} returns this
 */
proto.micromova.proto.ApplyExamResultRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string timezone = 3;
 * @return {string}
 */
proto.micromova.proto.ApplyExamResultRequest.prototype.getTimezone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.ApplyExamResultRequest} returns this
 */
proto.micromova.proto.ApplyExamResultRequest.prototype.setTimezone = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.AddPhraseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.AddPhraseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.AddPhraseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.AddPhraseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    phrase: (f = msg.getPhrase()) && phrase_pb.Phrase.toObject(includeInstance, f),
    collectionName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.AddPhraseRequest}
 */
proto.micromova.proto.AddPhraseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.AddPhraseRequest;
  return proto.micromova.proto.AddPhraseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.AddPhraseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.AddPhraseRequest}
 */
proto.micromova.proto.AddPhraseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new phrase_pb.Phrase;
      reader.readMessage(value,phrase_pb.Phrase.deserializeBinaryFromReader);
      msg.setPhrase(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.AddPhraseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.AddPhraseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.AddPhraseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.AddPhraseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhrase();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      phrase_pb.Phrase.serializeBinaryToWriter
    );
  }
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Phrase phrase = 1;
 * @return {?proto.micromova.proto.Phrase}
 */
proto.micromova.proto.AddPhraseRequest.prototype.getPhrase = function() {
  return /** @type{?proto.micromova.proto.Phrase} */ (
    jspb.Message.getWrapperField(this, phrase_pb.Phrase, 1));
};


/**
 * @param {?proto.micromova.proto.Phrase|undefined} value
 * @return {!proto.micromova.proto.AddPhraseRequest} returns this
*/
proto.micromova.proto.AddPhraseRequest.prototype.setPhrase = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.micromova.proto.AddPhraseRequest} returns this
 */
proto.micromova.proto.AddPhraseRequest.prototype.clearPhrase = function() {
  return this.setPhrase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.micromova.proto.AddPhraseRequest.prototype.hasPhrase = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string collection_name = 2;
 * @return {string}
 */
proto.micromova.proto.AddPhraseRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.AddPhraseRequest} returns this
 */
proto.micromova.proto.AddPhraseRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.AddPhraseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.AddPhraseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.AddPhraseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.AddPhraseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: (f = msg.getCollection()) && phrase_pb.CollectionView.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.AddPhraseResponse}
 */
proto.micromova.proto.AddPhraseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.AddPhraseResponse;
  return proto.micromova.proto.AddPhraseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.AddPhraseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.AddPhraseResponse}
 */
proto.micromova.proto.AddPhraseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new phrase_pb.CollectionView;
      reader.readMessage(value,phrase_pb.CollectionView.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.AddPhraseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.AddPhraseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.AddPhraseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.AddPhraseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      phrase_pb.CollectionView.serializeBinaryToWriter
    );
  }
};


/**
 * optional CollectionView collection = 1;
 * @return {?proto.micromova.proto.CollectionView}
 */
proto.micromova.proto.AddPhraseResponse.prototype.getCollection = function() {
  return /** @type{?proto.micromova.proto.CollectionView} */ (
    jspb.Message.getWrapperField(this, phrase_pb.CollectionView, 1));
};


/**
 * @param {?proto.micromova.proto.CollectionView|undefined} value
 * @return {!proto.micromova.proto.AddPhraseResponse} returns this
*/
proto.micromova.proto.AddPhraseResponse.prototype.setCollection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.micromova.proto.AddPhraseResponse} returns this
 */
proto.micromova.proto.AddPhraseResponse.prototype.clearCollection = function() {
  return this.setCollection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.micromova.proto.AddPhraseResponse.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.LoadCollectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.LoadCollectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.LoadCollectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.LoadCollectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.LoadCollectionRequest}
 */
proto.micromova.proto.LoadCollectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.LoadCollectionRequest;
  return proto.micromova.proto.LoadCollectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.LoadCollectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.LoadCollectionRequest}
 */
proto.micromova.proto.LoadCollectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.LoadCollectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.LoadCollectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.LoadCollectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.LoadCollectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.micromova.proto.LoadCollectionRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.LoadCollectionRequest} returns this
 */
proto.micromova.proto.LoadCollectionRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.LoadCollectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.LoadCollectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.LoadCollectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.LoadCollectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: (f = msg.getCollection()) && phrase_pb.CollectionView.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.LoadCollectionResponse}
 */
proto.micromova.proto.LoadCollectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.LoadCollectionResponse;
  return proto.micromova.proto.LoadCollectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.LoadCollectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.LoadCollectionResponse}
 */
proto.micromova.proto.LoadCollectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new phrase_pb.CollectionView;
      reader.readMessage(value,phrase_pb.CollectionView.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.LoadCollectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.LoadCollectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.LoadCollectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.LoadCollectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      phrase_pb.CollectionView.serializeBinaryToWriter
    );
  }
};


/**
 * optional CollectionView collection = 1;
 * @return {?proto.micromova.proto.CollectionView}
 */
proto.micromova.proto.LoadCollectionResponse.prototype.getCollection = function() {
  return /** @type{?proto.micromova.proto.CollectionView} */ (
    jspb.Message.getWrapperField(this, phrase_pb.CollectionView, 1));
};


/**
 * @param {?proto.micromova.proto.CollectionView|undefined} value
 * @return {!proto.micromova.proto.LoadCollectionResponse} returns this
*/
proto.micromova.proto.LoadCollectionResponse.prototype.setCollection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.micromova.proto.LoadCollectionResponse} returns this
 */
proto.micromova.proto.LoadCollectionResponse.prototype.clearCollection = function() {
  return this.setCollection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.micromova.proto.LoadCollectionResponse.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.LoadCollectionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.LoadCollectionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.LoadCollectionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.LoadCollectionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.LoadCollectionsRequest}
 */
proto.micromova.proto.LoadCollectionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.LoadCollectionsRequest;
  return proto.micromova.proto.LoadCollectionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.LoadCollectionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.LoadCollectionsRequest}
 */
proto.micromova.proto.LoadCollectionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.LoadCollectionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.LoadCollectionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.LoadCollectionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.LoadCollectionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.micromova.proto.LoadCollectionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.LoadCollectionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.LoadCollectionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.LoadCollectionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.LoadCollectionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    namesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.LoadCollectionsResponse}
 */
proto.micromova.proto.LoadCollectionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.LoadCollectionsResponse;
  return proto.micromova.proto.LoadCollectionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.LoadCollectionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.LoadCollectionsResponse}
 */
proto.micromova.proto.LoadCollectionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.LoadCollectionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.LoadCollectionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.LoadCollectionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.LoadCollectionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string names = 1;
 * @return {!Array<string>}
 */
proto.micromova.proto.LoadCollectionsResponse.prototype.getNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.micromova.proto.LoadCollectionsResponse} returns this
 */
proto.micromova.proto.LoadCollectionsResponse.prototype.setNamesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.micromova.proto.LoadCollectionsResponse} returns this
 */
proto.micromova.proto.LoadCollectionsResponse.prototype.addNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.micromova.proto.LoadCollectionsResponse} returns this
 */
proto.micromova.proto.LoadCollectionsResponse.prototype.clearNamesList = function() {
  return this.setNamesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.UpdateCollectionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.UpdateCollectionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.UpdateCollectionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.UpdateCollectionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isDiscoverEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    discoverPoints: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.UpdateCollectionRequest}
 */
proto.micromova.proto.UpdateCollectionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.UpdateCollectionRequest;
  return proto.micromova.proto.UpdateCollectionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.UpdateCollectionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.UpdateCollectionRequest}
 */
proto.micromova.proto.UpdateCollectionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDiscoverEnabled(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiscoverPoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.UpdateCollectionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.UpdateCollectionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.UpdateCollectionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.UpdateCollectionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsDiscoverEnabled();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getDiscoverPoints();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.micromova.proto.UpdateCollectionRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.UpdateCollectionRequest} returns this
 */
proto.micromova.proto.UpdateCollectionRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_discover_enabled = 2;
 * @return {boolean}
 */
proto.micromova.proto.UpdateCollectionRequest.prototype.getIsDiscoverEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.micromova.proto.UpdateCollectionRequest} returns this
 */
proto.micromova.proto.UpdateCollectionRequest.prototype.setIsDiscoverEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 discover_points = 3;
 * @return {number}
 */
proto.micromova.proto.UpdateCollectionRequest.prototype.getDiscoverPoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.UpdateCollectionRequest} returns this
 */
proto.micromova.proto.UpdateCollectionRequest.prototype.setDiscoverPoints = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.UpdateCollectionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.UpdateCollectionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.UpdateCollectionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.UpdateCollectionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: (f = msg.getCollection()) && phrase_pb.CollectionView.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.UpdateCollectionResponse}
 */
proto.micromova.proto.UpdateCollectionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.UpdateCollectionResponse;
  return proto.micromova.proto.UpdateCollectionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.UpdateCollectionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.UpdateCollectionResponse}
 */
proto.micromova.proto.UpdateCollectionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new phrase_pb.CollectionView;
      reader.readMessage(value,phrase_pb.CollectionView.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.UpdateCollectionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.UpdateCollectionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.UpdateCollectionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.UpdateCollectionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      phrase_pb.CollectionView.serializeBinaryToWriter
    );
  }
};


/**
 * optional CollectionView collection = 1;
 * @return {?proto.micromova.proto.CollectionView}
 */
proto.micromova.proto.UpdateCollectionResponse.prototype.getCollection = function() {
  return /** @type{?proto.micromova.proto.CollectionView} */ (
    jspb.Message.getWrapperField(this, phrase_pb.CollectionView, 1));
};


/**
 * @param {?proto.micromova.proto.CollectionView|undefined} value
 * @return {!proto.micromova.proto.UpdateCollectionResponse} returns this
*/
proto.micromova.proto.UpdateCollectionResponse.prototype.setCollection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.micromova.proto.UpdateCollectionResponse} returns this
 */
proto.micromova.proto.UpdateCollectionResponse.prototype.clearCollection = function() {
  return this.setCollection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.micromova.proto.UpdateCollectionResponse.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.LoadPhraseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.LoadPhraseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.LoadPhraseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.LoadPhraseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    collectionName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.LoadPhraseRequest}
 */
proto.micromova.proto.LoadPhraseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.LoadPhraseRequest;
  return proto.micromova.proto.LoadPhraseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.LoadPhraseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.LoadPhraseRequest}
 */
proto.micromova.proto.LoadPhraseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.LoadPhraseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.LoadPhraseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.LoadPhraseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.LoadPhraseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {string}
 */
proto.micromova.proto.LoadPhraseRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.LoadPhraseRequest} returns this
 */
proto.micromova.proto.LoadPhraseRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string collection_name = 2;
 * @return {string}
 */
proto.micromova.proto.LoadPhraseRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.LoadPhraseRequest} returns this
 */
proto.micromova.proto.LoadPhraseRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.LoadPhraseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.LoadPhraseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.LoadPhraseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.LoadPhraseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    phrase: (f = msg.getPhrase()) && phrase_pb.Phrase.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.LoadPhraseResponse}
 */
proto.micromova.proto.LoadPhraseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.LoadPhraseResponse;
  return proto.micromova.proto.LoadPhraseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.LoadPhraseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.LoadPhraseResponse}
 */
proto.micromova.proto.LoadPhraseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new phrase_pb.Phrase;
      reader.readMessage(value,phrase_pb.Phrase.deserializeBinaryFromReader);
      msg.setPhrase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.LoadPhraseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.LoadPhraseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.LoadPhraseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.LoadPhraseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhrase();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      phrase_pb.Phrase.serializeBinaryToWriter
    );
  }
};


/**
 * optional Phrase phrase = 1;
 * @return {?proto.micromova.proto.Phrase}
 */
proto.micromova.proto.LoadPhraseResponse.prototype.getPhrase = function() {
  return /** @type{?proto.micromova.proto.Phrase} */ (
    jspb.Message.getWrapperField(this, phrase_pb.Phrase, 1));
};


/**
 * @param {?proto.micromova.proto.Phrase|undefined} value
 * @return {!proto.micromova.proto.LoadPhraseResponse} returns this
*/
proto.micromova.proto.LoadPhraseResponse.prototype.setPhrase = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.micromova.proto.LoadPhraseResponse} returns this
 */
proto.micromova.proto.LoadPhraseResponse.prototype.clearPhrase = function() {
  return this.setPhrase(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.micromova.proto.LoadPhraseResponse.prototype.hasPhrase = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.RemovePhraseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.RemovePhraseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.RemovePhraseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.RemovePhraseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    collectionName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.RemovePhraseRequest}
 */
proto.micromova.proto.RemovePhraseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.RemovePhraseRequest;
  return proto.micromova.proto.RemovePhraseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.RemovePhraseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.RemovePhraseRequest}
 */
proto.micromova.proto.RemovePhraseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.RemovePhraseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.RemovePhraseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.RemovePhraseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.RemovePhraseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {string}
 */
proto.micromova.proto.RemovePhraseRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.RemovePhraseRequest} returns this
 */
proto.micromova.proto.RemovePhraseRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string collection_name = 2;
 * @return {string}
 */
proto.micromova.proto.RemovePhraseRequest.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.RemovePhraseRequest} returns this
 */
proto.micromova.proto.RemovePhraseRequest.prototype.setCollectionName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.RemovePhraseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.RemovePhraseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.RemovePhraseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.RemovePhraseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    collection: (f = msg.getCollection()) && phrase_pb.CollectionView.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.RemovePhraseResponse}
 */
proto.micromova.proto.RemovePhraseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.RemovePhraseResponse;
  return proto.micromova.proto.RemovePhraseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.RemovePhraseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.RemovePhraseResponse}
 */
proto.micromova.proto.RemovePhraseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new phrase_pb.CollectionView;
      reader.readMessage(value,phrase_pb.CollectionView.deserializeBinaryFromReader);
      msg.setCollection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.RemovePhraseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.RemovePhraseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.RemovePhraseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.RemovePhraseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCollection();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      phrase_pb.CollectionView.serializeBinaryToWriter
    );
  }
};


/**
 * optional CollectionView collection = 1;
 * @return {?proto.micromova.proto.CollectionView}
 */
proto.micromova.proto.RemovePhraseResponse.prototype.getCollection = function() {
  return /** @type{?proto.micromova.proto.CollectionView} */ (
    jspb.Message.getWrapperField(this, phrase_pb.CollectionView, 1));
};


/**
 * @param {?proto.micromova.proto.CollectionView|undefined} value
 * @return {!proto.micromova.proto.RemovePhraseResponse} returns this
*/
proto.micromova.proto.RemovePhraseResponse.prototype.setCollection = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.micromova.proto.RemovePhraseResponse} returns this
 */
proto.micromova.proto.RemovePhraseResponse.prototype.clearCollection = function() {
  return this.setCollection(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.micromova.proto.RemovePhraseResponse.prototype.hasCollection = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.micromova.proto);
