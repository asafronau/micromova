// source: phrase.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var audio_pb = require('./audio_pb.js');
goog.object.extend(proto, audio_pb);
var language_pb = require('./language_pb.js');
goog.object.extend(proto, language_pb);
goog.exportSymbol('proto.micromova.proto.Collection', null, global);
goog.exportSymbol('proto.micromova.proto.CollectionView', null, global);
goog.exportSymbol('proto.micromova.proto.Phrase', null, global);
goog.exportSymbol('proto.micromova.proto.PhraseHeadline', null, global);
goog.exportSymbol('proto.micromova.proto.RecentScores', null, global);
goog.exportSymbol('proto.micromova.proto.Translation', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.Translation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.Translation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.Translation.displayName = 'proto.micromova.proto.Translation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.Phrase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.micromova.proto.Phrase.repeatedFields_, null);
};
goog.inherits(proto.micromova.proto.Phrase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.Phrase.displayName = 'proto.micromova.proto.Phrase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.RecentScores = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.RecentScores, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.RecentScores.displayName = 'proto.micromova.proto.RecentScores';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.Collection = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.micromova.proto.Collection.repeatedFields_, null);
};
goog.inherits(proto.micromova.proto.Collection, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.Collection.displayName = 'proto.micromova.proto.Collection';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.PhraseHeadline = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.PhraseHeadline, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.PhraseHeadline.displayName = 'proto.micromova.proto.PhraseHeadline';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.CollectionView = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.micromova.proto.CollectionView.repeatedFields_, null);
};
goog.inherits(proto.micromova.proto.CollectionView, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.CollectionView.displayName = 'proto.micromova.proto.CollectionView';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.Translation.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.Translation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.Translation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.Translation.toObject = function(includeInstance, msg) {
  var f, obj = {
    language: jspb.Message.getFieldWithDefault(msg, 1, 0),
    text: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.Translation}
 */
proto.micromova.proto.Translation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.Translation;
  return proto.micromova.proto.Translation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.Translation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.Translation}
 */
proto.micromova.proto.Translation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.micromova.proto.Language} */ (reader.readEnum());
      msg.setLanguage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.Translation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.Translation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.Translation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.Translation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLanguage();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional Language language = 1;
 * @return {!proto.micromova.proto.Language}
 */
proto.micromova.proto.Translation.prototype.getLanguage = function() {
  return /** @type {!proto.micromova.proto.Language} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.micromova.proto.Language} value
 * @return {!proto.micromova.proto.Translation} returns this
 */
proto.micromova.proto.Translation.prototype.setLanguage = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.micromova.proto.Translation.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.Translation} returns this
 */
proto.micromova.proto.Translation.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.micromova.proto.Phrase.repeatedFields_ = [4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.Phrase.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.Phrase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.Phrase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.Phrase.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    normalizedText: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sourceLanguage: jspb.Message.getFieldWithDefault(msg, 3, 0),
    translationList: jspb.Message.toObjectList(msg.getTranslationList(),
    proto.micromova.proto.Translation.toObject, includeInstance),
    recordingList: jspb.Message.toObjectList(msg.getRecordingList(),
    audio_pb.Recording.toObject, includeInstance),
    starScoreMillis: jspb.Message.getFieldWithDefault(msg, 6, 0),
    successTimeSeconds: jspb.Message.getFieldWithDefault(msg, 7, 0),
    score: jspb.Message.getFieldWithDefault(msg, 8, 0),
    isDiscoverable: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    correctAnswersDelta: jspb.Message.getFieldWithDefault(msg, 10, 0),
    example: jspb.Message.getFieldWithDefault(msg, 11, ""),
    comment: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.Phrase}
 */
proto.micromova.proto.Phrase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.Phrase;
  return proto.micromova.proto.Phrase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.Phrase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.Phrase}
 */
proto.micromova.proto.Phrase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNormalizedText(value);
      break;
    case 3:
      var value = /** @type {!proto.micromova.proto.Language} */ (reader.readEnum());
      msg.setSourceLanguage(value);
      break;
    case 4:
      var value = new proto.micromova.proto.Translation;
      reader.readMessage(value,proto.micromova.proto.Translation.deserializeBinaryFromReader);
      msg.addTranslation(value);
      break;
    case 5:
      var value = new audio_pb.Recording;
      reader.readMessage(value,audio_pb.Recording.deserializeBinaryFromReader);
      msg.addRecording(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStarScoreMillis(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSuccessTimeSeconds(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDiscoverable(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCorrectAnswersDelta(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setExample(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.Phrase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.Phrase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.Phrase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.Phrase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getNormalizedText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSourceLanguage();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTranslationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.micromova.proto.Translation.serializeBinaryToWriter
    );
  }
  f = message.getRecordingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      audio_pb.Recording.serializeBinaryToWriter
    );
  }
  f = message.getStarScoreMillis();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSuccessTimeSeconds();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getIsDiscoverable();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getCorrectAnswersDelta();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getExample();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getComment();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {string}
 */
proto.micromova.proto.Phrase.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.Phrase} returns this
 */
proto.micromova.proto.Phrase.prototype.setId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string normalized_text = 2;
 * @return {string}
 */
proto.micromova.proto.Phrase.prototype.getNormalizedText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.Phrase} returns this
 */
proto.micromova.proto.Phrase.prototype.setNormalizedText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Language source_language = 3;
 * @return {!proto.micromova.proto.Language}
 */
proto.micromova.proto.Phrase.prototype.getSourceLanguage = function() {
  return /** @type {!proto.micromova.proto.Language} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.micromova.proto.Language} value
 * @return {!proto.micromova.proto.Phrase} returns this
 */
proto.micromova.proto.Phrase.prototype.setSourceLanguage = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated Translation translation = 4;
 * @return {!Array<!proto.micromova.proto.Translation>}
 */
proto.micromova.proto.Phrase.prototype.getTranslationList = function() {
  return /** @type{!Array<!proto.micromova.proto.Translation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.micromova.proto.Translation, 4));
};


/**
 * @param {!Array<!proto.micromova.proto.Translation>} value
 * @return {!proto.micromova.proto.Phrase} returns this
*/
proto.micromova.proto.Phrase.prototype.setTranslationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.micromova.proto.Translation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.micromova.proto.Translation}
 */
proto.micromova.proto.Phrase.prototype.addTranslation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.micromova.proto.Translation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.micromova.proto.Phrase} returns this
 */
proto.micromova.proto.Phrase.prototype.clearTranslationList = function() {
  return this.setTranslationList([]);
};


/**
 * repeated Recording recording = 5;
 * @return {!Array<!proto.micromova.proto.Recording>}
 */
proto.micromova.proto.Phrase.prototype.getRecordingList = function() {
  return /** @type{!Array<!proto.micromova.proto.Recording>} */ (
    jspb.Message.getRepeatedWrapperField(this, audio_pb.Recording, 5));
};


/**
 * @param {!Array<!proto.micromova.proto.Recording>} value
 * @return {!proto.micromova.proto.Phrase} returns this
*/
proto.micromova.proto.Phrase.prototype.setRecordingList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.micromova.proto.Recording=} opt_value
 * @param {number=} opt_index
 * @return {!proto.micromova.proto.Recording}
 */
proto.micromova.proto.Phrase.prototype.addRecording = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.micromova.proto.Recording, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.micromova.proto.Phrase} returns this
 */
proto.micromova.proto.Phrase.prototype.clearRecordingList = function() {
  return this.setRecordingList([]);
};


/**
 * optional int32 star_score_millis = 6;
 * @return {number}
 */
proto.micromova.proto.Phrase.prototype.getStarScoreMillis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.Phrase} returns this
 */
proto.micromova.proto.Phrase.prototype.setStarScoreMillis = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 success_time_seconds = 7;
 * @return {number}
 */
proto.micromova.proto.Phrase.prototype.getSuccessTimeSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.Phrase} returns this
 */
proto.micromova.proto.Phrase.prototype.setSuccessTimeSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 score = 8;
 * @return {number}
 */
proto.micromova.proto.Phrase.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.Phrase} returns this
 */
proto.micromova.proto.Phrase.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool is_discoverable = 9;
 * @return {boolean}
 */
proto.micromova.proto.Phrase.prototype.getIsDiscoverable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.micromova.proto.Phrase} returns this
 */
proto.micromova.proto.Phrase.prototype.setIsDiscoverable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional int32 correct_answers_delta = 10;
 * @return {number}
 */
proto.micromova.proto.Phrase.prototype.getCorrectAnswersDelta = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.Phrase} returns this
 */
proto.micromova.proto.Phrase.prototype.setCorrectAnswersDelta = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string example = 11;
 * @return {string}
 */
proto.micromova.proto.Phrase.prototype.getExample = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.Phrase} returns this
 */
proto.micromova.proto.Phrase.prototype.setExample = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string comment = 12;
 * @return {string}
 */
proto.micromova.proto.Phrase.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.Phrase} returns this
 */
proto.micromova.proto.Phrase.prototype.setComment = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.RecentScores.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.RecentScores.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.RecentScores} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.RecentScores.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    score: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.RecentScores}
 */
proto.micromova.proto.RecentScores.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.RecentScores;
  return proto.micromova.proto.RecentScores.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.RecentScores} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.RecentScores}
 */
proto.micromova.proto.RecentScores.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.RecentScores.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.RecentScores.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.RecentScores} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.RecentScores.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 timestamp = 1;
 * @return {number}
 */
proto.micromova.proto.RecentScores.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.RecentScores} returns this
 */
proto.micromova.proto.RecentScores.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 score = 2;
 * @return {number}
 */
proto.micromova.proto.RecentScores.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.RecentScores} returns this
 */
proto.micromova.proto.RecentScores.prototype.setScore = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.micromova.proto.Collection.repeatedFields_ = [7,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.Collection.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.Collection.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.Collection} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.Collection.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sourceLanguage: jspb.Message.getFieldWithDefault(msg, 3, 0),
    translationLanguage: jspb.Message.getFieldWithDefault(msg, 4, 0),
    discoverPoints: jspb.Message.getFieldWithDefault(msg, 5, 0),
    currentDiscoverPoints: jspb.Message.getFieldWithDefault(msg, 6, 0),
    phraseList: jspb.Message.toObjectList(msg.getPhraseList(),
    proto.micromova.proto.Phrase.toObject, includeInstance),
    isDiscoverEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    recentDiscoverPhraseEventTimeList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    recentScoreEventTimeList: jspb.Message.toObjectList(msg.getRecentScoreEventTimeList(),
    proto.micromova.proto.RecentScores.toObject, includeInstance),
    version: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.Collection}
 */
proto.micromova.proto.Collection.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.Collection;
  return proto.micromova.proto.Collection.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.Collection} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.Collection}
 */
proto.micromova.proto.Collection.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {!proto.micromova.proto.Language} */ (reader.readEnum());
      msg.setSourceLanguage(value);
      break;
    case 4:
      var value = /** @type {!proto.micromova.proto.Language} */ (reader.readEnum());
      msg.setTranslationLanguage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiscoverPoints(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentDiscoverPoints(value);
      break;
    case 7:
      var value = new proto.micromova.proto.Phrase;
      reader.readMessage(value,proto.micromova.proto.Phrase.deserializeBinaryFromReader);
      msg.addPhrase(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDiscoverEnabled(value);
      break;
    case 9:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRecentDiscoverPhraseEventTime(values[i]);
      }
      break;
    case 10:
      var value = new proto.micromova.proto.RecentScores;
      reader.readMessage(value,proto.micromova.proto.RecentScores.deserializeBinaryFromReader);
      msg.addRecentScoreEventTime(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.Collection.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.Collection.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.Collection} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.Collection.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSourceLanguage();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTranslationLanguage();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getDiscoverPoints();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCurrentDiscoverPoints();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getPhraseList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.micromova.proto.Phrase.serializeBinaryToWriter
    );
  }
  f = message.getIsDiscoverEnabled();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getRecentDiscoverPhraseEventTimeList();
  if (f.length > 0) {
    writer.writePackedInt32(
      9,
      f
    );
  }
  f = message.getRecentScoreEventTimeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.micromova.proto.RecentScores.serializeBinaryToWriter
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.micromova.proto.Collection.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.Collection} returns this
 */
proto.micromova.proto.Collection.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.micromova.proto.Collection.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.Collection} returns this
 */
proto.micromova.proto.Collection.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Language source_language = 3;
 * @return {!proto.micromova.proto.Language}
 */
proto.micromova.proto.Collection.prototype.getSourceLanguage = function() {
  return /** @type {!proto.micromova.proto.Language} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.micromova.proto.Language} value
 * @return {!proto.micromova.proto.Collection} returns this
 */
proto.micromova.proto.Collection.prototype.setSourceLanguage = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Language translation_language = 4;
 * @return {!proto.micromova.proto.Language}
 */
proto.micromova.proto.Collection.prototype.getTranslationLanguage = function() {
  return /** @type {!proto.micromova.proto.Language} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.micromova.proto.Language} value
 * @return {!proto.micromova.proto.Collection} returns this
 */
proto.micromova.proto.Collection.prototype.setTranslationLanguage = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int32 discover_points = 5;
 * @return {number}
 */
proto.micromova.proto.Collection.prototype.getDiscoverPoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.Collection} returns this
 */
proto.micromova.proto.Collection.prototype.setDiscoverPoints = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 current_discover_points = 6;
 * @return {number}
 */
proto.micromova.proto.Collection.prototype.getCurrentDiscoverPoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.Collection} returns this
 */
proto.micromova.proto.Collection.prototype.setCurrentDiscoverPoints = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated Phrase phrase = 7;
 * @return {!Array<!proto.micromova.proto.Phrase>}
 */
proto.micromova.proto.Collection.prototype.getPhraseList = function() {
  return /** @type{!Array<!proto.micromova.proto.Phrase>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.micromova.proto.Phrase, 7));
};


/**
 * @param {!Array<!proto.micromova.proto.Phrase>} value
 * @return {!proto.micromova.proto.Collection} returns this
*/
proto.micromova.proto.Collection.prototype.setPhraseList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.micromova.proto.Phrase=} opt_value
 * @param {number=} opt_index
 * @return {!proto.micromova.proto.Phrase}
 */
proto.micromova.proto.Collection.prototype.addPhrase = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.micromova.proto.Phrase, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.micromova.proto.Collection} returns this
 */
proto.micromova.proto.Collection.prototype.clearPhraseList = function() {
  return this.setPhraseList([]);
};


/**
 * optional bool is_discover_enabled = 8;
 * @return {boolean}
 */
proto.micromova.proto.Collection.prototype.getIsDiscoverEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.micromova.proto.Collection} returns this
 */
proto.micromova.proto.Collection.prototype.setIsDiscoverEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * repeated int32 recent_discover_phrase_event_time = 9;
 * @return {!Array<number>}
 */
proto.micromova.proto.Collection.prototype.getRecentDiscoverPhraseEventTimeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.micromova.proto.Collection} returns this
 */
proto.micromova.proto.Collection.prototype.setRecentDiscoverPhraseEventTimeList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.micromova.proto.Collection} returns this
 */
proto.micromova.proto.Collection.prototype.addRecentDiscoverPhraseEventTime = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.micromova.proto.Collection} returns this
 */
proto.micromova.proto.Collection.prototype.clearRecentDiscoverPhraseEventTimeList = function() {
  return this.setRecentDiscoverPhraseEventTimeList([]);
};


/**
 * repeated RecentScores recent_score_event_time = 10;
 * @return {!Array<!proto.micromova.proto.RecentScores>}
 */
proto.micromova.proto.Collection.prototype.getRecentScoreEventTimeList = function() {
  return /** @type{!Array<!proto.micromova.proto.RecentScores>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.micromova.proto.RecentScores, 10));
};


/**
 * @param {!Array<!proto.micromova.proto.RecentScores>} value
 * @return {!proto.micromova.proto.Collection} returns this
*/
proto.micromova.proto.Collection.prototype.setRecentScoreEventTimeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.micromova.proto.RecentScores=} opt_value
 * @param {number=} opt_index
 * @return {!proto.micromova.proto.RecentScores}
 */
proto.micromova.proto.Collection.prototype.addRecentScoreEventTime = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.micromova.proto.RecentScores, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.micromova.proto.Collection} returns this
 */
proto.micromova.proto.Collection.prototype.clearRecentScoreEventTimeList = function() {
  return this.setRecentScoreEventTimeList([]);
};


/**
 * optional int32 version = 11;
 * @return {number}
 */
proto.micromova.proto.Collection.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.Collection} returns this
 */
proto.micromova.proto.Collection.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.PhraseHeadline.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.PhraseHeadline.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.PhraseHeadline} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.PhraseHeadline.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    normalizedText: jspb.Message.getFieldWithDefault(msg, 2, ""),
    starScoreMillis: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isDiscoverable: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.PhraseHeadline}
 */
proto.micromova.proto.PhraseHeadline.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.PhraseHeadline;
  return proto.micromova.proto.PhraseHeadline.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.PhraseHeadline} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.PhraseHeadline}
 */
proto.micromova.proto.PhraseHeadline.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNormalizedText(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStarScoreMillis(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDiscoverable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.PhraseHeadline.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.PhraseHeadline.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.PhraseHeadline} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.PhraseHeadline.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getNormalizedText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStarScoreMillis();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIsDiscoverable();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {string}
 */
proto.micromova.proto.PhraseHeadline.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.PhraseHeadline} returns this
 */
proto.micromova.proto.PhraseHeadline.prototype.setId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string normalized_text = 2;
 * @return {string}
 */
proto.micromova.proto.PhraseHeadline.prototype.getNormalizedText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.PhraseHeadline} returns this
 */
proto.micromova.proto.PhraseHeadline.prototype.setNormalizedText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 star_score_millis = 3;
 * @return {number}
 */
proto.micromova.proto.PhraseHeadline.prototype.getStarScoreMillis = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.PhraseHeadline} returns this
 */
proto.micromova.proto.PhraseHeadline.prototype.setStarScoreMillis = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool is_discoverable = 4;
 * @return {boolean}
 */
proto.micromova.proto.PhraseHeadline.prototype.getIsDiscoverable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.micromova.proto.PhraseHeadline} returns this
 */
proto.micromova.proto.PhraseHeadline.prototype.setIsDiscoverable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.micromova.proto.CollectionView.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.CollectionView.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.CollectionView.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.CollectionView} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.CollectionView.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sourceLanguage: jspb.Message.getFieldWithDefault(msg, 3, 0),
    translationLanguage: jspb.Message.getFieldWithDefault(msg, 4, 0),
    discoverPoints: jspb.Message.getFieldWithDefault(msg, 5, 0),
    currentDiscoverPoints: jspb.Message.getFieldWithDefault(msg, 6, 0),
    isDiscoverEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    phraseList: jspb.Message.toObjectList(msg.getPhraseList(),
    proto.micromova.proto.PhraseHeadline.toObject, includeInstance),
    version: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.CollectionView}
 */
proto.micromova.proto.CollectionView.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.CollectionView;
  return proto.micromova.proto.CollectionView.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.CollectionView} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.CollectionView}
 */
proto.micromova.proto.CollectionView.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {!proto.micromova.proto.Language} */ (reader.readEnum());
      msg.setSourceLanguage(value);
      break;
    case 4:
      var value = /** @type {!proto.micromova.proto.Language} */ (reader.readEnum());
      msg.setTranslationLanguage(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDiscoverPoints(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentDiscoverPoints(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDiscoverEnabled(value);
      break;
    case 8:
      var value = new proto.micromova.proto.PhraseHeadline;
      reader.readMessage(value,proto.micromova.proto.PhraseHeadline.deserializeBinaryFromReader);
      msg.addPhrase(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.CollectionView.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.CollectionView.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.CollectionView} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.CollectionView.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSourceLanguage();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTranslationLanguage();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getDiscoverPoints();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCurrentDiscoverPoints();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getIsDiscoverEnabled();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getPhraseList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.micromova.proto.PhraseHeadline.serializeBinaryToWriter
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.micromova.proto.CollectionView.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.CollectionView} returns this
 */
proto.micromova.proto.CollectionView.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.micromova.proto.CollectionView.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.CollectionView} returns this
 */
proto.micromova.proto.CollectionView.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Language source_language = 3;
 * @return {!proto.micromova.proto.Language}
 */
proto.micromova.proto.CollectionView.prototype.getSourceLanguage = function() {
  return /** @type {!proto.micromova.proto.Language} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.micromova.proto.Language} value
 * @return {!proto.micromova.proto.CollectionView} returns this
 */
proto.micromova.proto.CollectionView.prototype.setSourceLanguage = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Language translation_language = 4;
 * @return {!proto.micromova.proto.Language}
 */
proto.micromova.proto.CollectionView.prototype.getTranslationLanguage = function() {
  return /** @type {!proto.micromova.proto.Language} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.micromova.proto.Language} value
 * @return {!proto.micromova.proto.CollectionView} returns this
 */
proto.micromova.proto.CollectionView.prototype.setTranslationLanguage = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional int32 discover_points = 5;
 * @return {number}
 */
proto.micromova.proto.CollectionView.prototype.getDiscoverPoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.CollectionView} returns this
 */
proto.micromova.proto.CollectionView.prototype.setDiscoverPoints = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 current_discover_points = 6;
 * @return {number}
 */
proto.micromova.proto.CollectionView.prototype.getCurrentDiscoverPoints = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.CollectionView} returns this
 */
proto.micromova.proto.CollectionView.prototype.setCurrentDiscoverPoints = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bool is_discover_enabled = 7;
 * @return {boolean}
 */
proto.micromova.proto.CollectionView.prototype.getIsDiscoverEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.micromova.proto.CollectionView} returns this
 */
proto.micromova.proto.CollectionView.prototype.setIsDiscoverEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * repeated PhraseHeadline phrase = 8;
 * @return {!Array<!proto.micromova.proto.PhraseHeadline>}
 */
proto.micromova.proto.CollectionView.prototype.getPhraseList = function() {
  return /** @type{!Array<!proto.micromova.proto.PhraseHeadline>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.micromova.proto.PhraseHeadline, 8));
};


/**
 * @param {!Array<!proto.micromova.proto.PhraseHeadline>} value
 * @return {!proto.micromova.proto.CollectionView} returns this
*/
proto.micromova.proto.CollectionView.prototype.setPhraseList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.micromova.proto.PhraseHeadline=} opt_value
 * @param {number=} opt_index
 * @return {!proto.micromova.proto.PhraseHeadline}
 */
proto.micromova.proto.CollectionView.prototype.addPhrase = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.micromova.proto.PhraseHeadline, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.micromova.proto.CollectionView} returns this
 */
proto.micromova.proto.CollectionView.prototype.clearPhraseList = function() {
  return this.setPhraseList([]);
};


/**
 * optional int32 version = 9;
 * @return {number}
 */
proto.micromova.proto.CollectionView.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.CollectionView} returns this
 */
proto.micromova.proto.CollectionView.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


goog.object.extend(exports, proto.micromova.proto);
