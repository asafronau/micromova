// source: exam.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.micromova.proto.Exam', null, global);
goog.exportSymbol('proto.micromova.proto.SelectTranslationTest', null, global);
goog.exportSymbol('proto.micromova.proto.SelectedOptions', null, global);
goog.exportSymbol('proto.micromova.proto.SpellTest', null, global);
goog.exportSymbol('proto.micromova.proto.TaskResult', null, global);
goog.exportSymbol('proto.micromova.proto.TestType', null, global);
goog.exportSymbol('proto.micromova.proto.TypeSourceTest', null, global);
goog.exportSymbol('proto.micromova.proto.TypeTranslationTest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.SelectedOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.SelectedOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.SelectedOptions.displayName = 'proto.micromova.proto.SelectedOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.SelectTranslationTest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.micromova.proto.SelectTranslationTest.repeatedFields_, null);
};
goog.inherits(proto.micromova.proto.SelectTranslationTest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.SelectTranslationTest.displayName = 'proto.micromova.proto.SelectTranslationTest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.SpellTest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.SpellTest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.SpellTest.displayName = 'proto.micromova.proto.SpellTest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.TypeTranslationTest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.micromova.proto.TypeTranslationTest.repeatedFields_, null);
};
goog.inherits(proto.micromova.proto.TypeTranslationTest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.TypeTranslationTest.displayName = 'proto.micromova.proto.TypeTranslationTest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.TypeSourceTest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.micromova.proto.TypeSourceTest.repeatedFields_, null);
};
goog.inherits(proto.micromova.proto.TypeSourceTest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.TypeSourceTest.displayName = 'proto.micromova.proto.TypeSourceTest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.Exam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.micromova.proto.Exam.repeatedFields_, null);
};
goog.inherits(proto.micromova.proto.Exam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.Exam.displayName = 'proto.micromova.proto.Exam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.micromova.proto.TaskResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.micromova.proto.TaskResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.micromova.proto.TaskResult.displayName = 'proto.micromova.proto.TaskResult';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.SelectedOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.SelectedOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.SelectedOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.SelectedOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    translation: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isCorrect: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.SelectedOptions}
 */
proto.micromova.proto.SelectedOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.SelectedOptions;
  return proto.micromova.proto.SelectedOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.SelectedOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.SelectedOptions}
 */
proto.micromova.proto.SelectedOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranslation(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCorrect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.SelectedOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.SelectedOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.SelectedOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.SelectedOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranslation();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsCorrect();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string translation = 1;
 * @return {string}
 */
proto.micromova.proto.SelectedOptions.prototype.getTranslation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.SelectedOptions} returns this
 */
proto.micromova.proto.SelectedOptions.prototype.setTranslation = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_correct = 2;
 * @return {boolean}
 */
proto.micromova.proto.SelectedOptions.prototype.getIsCorrect = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.micromova.proto.SelectedOptions} returns this
 */
proto.micromova.proto.SelectedOptions.prototype.setIsCorrect = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.micromova.proto.SelectTranslationTest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.SelectTranslationTest.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.SelectTranslationTest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.SelectTranslationTest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.SelectTranslationTest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    phrase: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isPhraseHidden: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    optionsList: jspb.Message.toObjectList(msg.getOptionsList(),
    proto.micromova.proto.SelectedOptions.toObject, includeInstance),
    correctScoreUser: jspb.Message.getFieldWithDefault(msg, 5, 0),
    wrongScoreUser: jspb.Message.getFieldWithDefault(msg, 6, 0),
    correctScorePhrase: jspb.Message.getFieldWithDefault(msg, 7, 0),
    wrongScorePhrase: jspb.Message.getFieldWithDefault(msg, 8, 0),
    isNewPhrase: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    example: jspb.Message.getFieldWithDefault(msg, 10, ""),
    mp3Url: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.SelectTranslationTest}
 */
proto.micromova.proto.SelectTranslationTest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.SelectTranslationTest;
  return proto.micromova.proto.SelectTranslationTest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.SelectTranslationTest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.SelectTranslationTest}
 */
proto.micromova.proto.SelectTranslationTest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhrase(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPhraseHidden(value);
      break;
    case 4:
      var value = new proto.micromova.proto.SelectedOptions;
      reader.readMessage(value,proto.micromova.proto.SelectedOptions.deserializeBinaryFromReader);
      msg.addOptions(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCorrectScoreUser(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWrongScoreUser(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCorrectScorePhrase(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWrongScorePhrase(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsNewPhrase(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setExample(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setMp3Url(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.SelectTranslationTest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.SelectTranslationTest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.SelectTranslationTest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.SelectTranslationTest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getPhrase();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsPhraseHidden();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getOptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.micromova.proto.SelectedOptions.serializeBinaryToWriter
    );
  }
  f = message.getCorrectScoreUser();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getWrongScoreUser();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getCorrectScorePhrase();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getWrongScorePhrase();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getIsNewPhrase();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getExample();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getMp3Url();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {string}
 */
proto.micromova.proto.SelectTranslationTest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.SelectTranslationTest} returns this
 */
proto.micromova.proto.SelectTranslationTest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string phrase = 2;
 * @return {string}
 */
proto.micromova.proto.SelectTranslationTest.prototype.getPhrase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.SelectTranslationTest} returns this
 */
proto.micromova.proto.SelectTranslationTest.prototype.setPhrase = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool is_phrase_hidden = 3;
 * @return {boolean}
 */
proto.micromova.proto.SelectTranslationTest.prototype.getIsPhraseHidden = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.micromova.proto.SelectTranslationTest} returns this
 */
proto.micromova.proto.SelectTranslationTest.prototype.setIsPhraseHidden = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated SelectedOptions options = 4;
 * @return {!Array<!proto.micromova.proto.SelectedOptions>}
 */
proto.micromova.proto.SelectTranslationTest.prototype.getOptionsList = function() {
  return /** @type{!Array<!proto.micromova.proto.SelectedOptions>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.micromova.proto.SelectedOptions, 4));
};


/**
 * @param {!Array<!proto.micromova.proto.SelectedOptions>} value
 * @return {!proto.micromova.proto.SelectTranslationTest} returns this
*/
proto.micromova.proto.SelectTranslationTest.prototype.setOptionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.micromova.proto.SelectedOptions=} opt_value
 * @param {number=} opt_index
 * @return {!proto.micromova.proto.SelectedOptions}
 */
proto.micromova.proto.SelectTranslationTest.prototype.addOptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.micromova.proto.SelectedOptions, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.micromova.proto.SelectTranslationTest} returns this
 */
proto.micromova.proto.SelectTranslationTest.prototype.clearOptionsList = function() {
  return this.setOptionsList([]);
};


/**
 * optional int32 correct_score_user = 5;
 * @return {number}
 */
proto.micromova.proto.SelectTranslationTest.prototype.getCorrectScoreUser = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.SelectTranslationTest} returns this
 */
proto.micromova.proto.SelectTranslationTest.prototype.setCorrectScoreUser = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 wrong_score_user = 6;
 * @return {number}
 */
proto.micromova.proto.SelectTranslationTest.prototype.getWrongScoreUser = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.SelectTranslationTest} returns this
 */
proto.micromova.proto.SelectTranslationTest.prototype.setWrongScoreUser = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 correct_score_phrase = 7;
 * @return {number}
 */
proto.micromova.proto.SelectTranslationTest.prototype.getCorrectScorePhrase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.SelectTranslationTest} returns this
 */
proto.micromova.proto.SelectTranslationTest.prototype.setCorrectScorePhrase = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 wrong_score_phrase = 8;
 * @return {number}
 */
proto.micromova.proto.SelectTranslationTest.prototype.getWrongScorePhrase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.SelectTranslationTest} returns this
 */
proto.micromova.proto.SelectTranslationTest.prototype.setWrongScorePhrase = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool is_new_phrase = 9;
 * @return {boolean}
 */
proto.micromova.proto.SelectTranslationTest.prototype.getIsNewPhrase = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.micromova.proto.SelectTranslationTest} returns this
 */
proto.micromova.proto.SelectTranslationTest.prototype.setIsNewPhrase = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string example = 10;
 * @return {string}
 */
proto.micromova.proto.SelectTranslationTest.prototype.getExample = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.SelectTranslationTest} returns this
 */
proto.micromova.proto.SelectTranslationTest.prototype.setExample = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string mp3_url = 11;
 * @return {string}
 */
proto.micromova.proto.SelectTranslationTest.prototype.getMp3Url = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.SelectTranslationTest} returns this
 */
proto.micromova.proto.SelectTranslationTest.prototype.setMp3Url = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.SpellTest.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.SpellTest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.SpellTest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.SpellTest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    phrase: jspb.Message.getFieldWithDefault(msg, 2, ""),
    correctScoreUser: jspb.Message.getFieldWithDefault(msg, 3, 0),
    wrongScoreUser: jspb.Message.getFieldWithDefault(msg, 4, 0),
    correctScorePhrase: jspb.Message.getFieldWithDefault(msg, 5, 0),
    wrongScorePhrase: jspb.Message.getFieldWithDefault(msg, 6, 0),
    example: jspb.Message.getFieldWithDefault(msg, 7, ""),
    translation: jspb.Message.getFieldWithDefault(msg, 8, ""),
    mp3Url: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.SpellTest}
 */
proto.micromova.proto.SpellTest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.SpellTest;
  return proto.micromova.proto.SpellTest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.SpellTest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.SpellTest}
 */
proto.micromova.proto.SpellTest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhrase(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCorrectScoreUser(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWrongScoreUser(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCorrectScorePhrase(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWrongScorePhrase(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setExample(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranslation(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMp3Url(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.SpellTest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.SpellTest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.SpellTest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.SpellTest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getPhrase();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCorrectScoreUser();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getWrongScoreUser();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCorrectScorePhrase();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getWrongScorePhrase();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getExample();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTranslation();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMp3Url();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {string}
 */
proto.micromova.proto.SpellTest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.SpellTest} returns this
 */
proto.micromova.proto.SpellTest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string phrase = 2;
 * @return {string}
 */
proto.micromova.proto.SpellTest.prototype.getPhrase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.SpellTest} returns this
 */
proto.micromova.proto.SpellTest.prototype.setPhrase = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 correct_score_user = 3;
 * @return {number}
 */
proto.micromova.proto.SpellTest.prototype.getCorrectScoreUser = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.SpellTest} returns this
 */
proto.micromova.proto.SpellTest.prototype.setCorrectScoreUser = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 wrong_score_user = 4;
 * @return {number}
 */
proto.micromova.proto.SpellTest.prototype.getWrongScoreUser = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.SpellTest} returns this
 */
proto.micromova.proto.SpellTest.prototype.setWrongScoreUser = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 correct_score_phrase = 5;
 * @return {number}
 */
proto.micromova.proto.SpellTest.prototype.getCorrectScorePhrase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.SpellTest} returns this
 */
proto.micromova.proto.SpellTest.prototype.setCorrectScorePhrase = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 wrong_score_phrase = 6;
 * @return {number}
 */
proto.micromova.proto.SpellTest.prototype.getWrongScorePhrase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.SpellTest} returns this
 */
proto.micromova.proto.SpellTest.prototype.setWrongScorePhrase = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string example = 7;
 * @return {string}
 */
proto.micromova.proto.SpellTest.prototype.getExample = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.SpellTest} returns this
 */
proto.micromova.proto.SpellTest.prototype.setExample = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string translation = 8;
 * @return {string}
 */
proto.micromova.proto.SpellTest.prototype.getTranslation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.SpellTest} returns this
 */
proto.micromova.proto.SpellTest.prototype.setTranslation = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string mp3_url = 9;
 * @return {string}
 */
proto.micromova.proto.SpellTest.prototype.getMp3Url = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.SpellTest} returns this
 */
proto.micromova.proto.SpellTest.prototype.setMp3Url = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.micromova.proto.TypeTranslationTest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.TypeTranslationTest.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.TypeTranslationTest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.TypeTranslationTest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.TypeTranslationTest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    phrase: jspb.Message.getFieldWithDefault(msg, 2, ""),
    correctTranslationsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    isPhraseHidden: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    correctScoreUser: jspb.Message.getFieldWithDefault(msg, 5, 0),
    wrongScoreUser: jspb.Message.getFieldWithDefault(msg, 6, 0),
    correctScorePhrase: jspb.Message.getFieldWithDefault(msg, 7, 0),
    wrongScorePhrase: jspb.Message.getFieldWithDefault(msg, 8, 0),
    example: jspb.Message.getFieldWithDefault(msg, 9, ""),
    mp3Url: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.TypeTranslationTest}
 */
proto.micromova.proto.TypeTranslationTest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.TypeTranslationTest;
  return proto.micromova.proto.TypeTranslationTest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.TypeTranslationTest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.TypeTranslationTest}
 */
proto.micromova.proto.TypeTranslationTest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhrase(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addCorrectTranslations(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPhraseHidden(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCorrectScoreUser(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWrongScoreUser(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCorrectScorePhrase(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWrongScorePhrase(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setExample(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMp3Url(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.TypeTranslationTest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.TypeTranslationTest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.TypeTranslationTest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.TypeTranslationTest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getPhrase();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCorrectTranslationsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getIsPhraseHidden();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getCorrectScoreUser();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getWrongScoreUser();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getCorrectScorePhrase();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getWrongScorePhrase();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getExample();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMp3Url();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {string}
 */
proto.micromova.proto.TypeTranslationTest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.TypeTranslationTest} returns this
 */
proto.micromova.proto.TypeTranslationTest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string phrase = 2;
 * @return {string}
 */
proto.micromova.proto.TypeTranslationTest.prototype.getPhrase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.TypeTranslationTest} returns this
 */
proto.micromova.proto.TypeTranslationTest.prototype.setPhrase = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string correct_translations = 3;
 * @return {!Array<string>}
 */
proto.micromova.proto.TypeTranslationTest.prototype.getCorrectTranslationsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.micromova.proto.TypeTranslationTest} returns this
 */
proto.micromova.proto.TypeTranslationTest.prototype.setCorrectTranslationsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.micromova.proto.TypeTranslationTest} returns this
 */
proto.micromova.proto.TypeTranslationTest.prototype.addCorrectTranslations = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.micromova.proto.TypeTranslationTest} returns this
 */
proto.micromova.proto.TypeTranslationTest.prototype.clearCorrectTranslationsList = function() {
  return this.setCorrectTranslationsList([]);
};


/**
 * optional bool is_phrase_hidden = 4;
 * @return {boolean}
 */
proto.micromova.proto.TypeTranslationTest.prototype.getIsPhraseHidden = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.micromova.proto.TypeTranslationTest} returns this
 */
proto.micromova.proto.TypeTranslationTest.prototype.setIsPhraseHidden = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional int32 correct_score_user = 5;
 * @return {number}
 */
proto.micromova.proto.TypeTranslationTest.prototype.getCorrectScoreUser = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.TypeTranslationTest} returns this
 */
proto.micromova.proto.TypeTranslationTest.prototype.setCorrectScoreUser = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 wrong_score_user = 6;
 * @return {number}
 */
proto.micromova.proto.TypeTranslationTest.prototype.getWrongScoreUser = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.TypeTranslationTest} returns this
 */
proto.micromova.proto.TypeTranslationTest.prototype.setWrongScoreUser = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 correct_score_phrase = 7;
 * @return {number}
 */
proto.micromova.proto.TypeTranslationTest.prototype.getCorrectScorePhrase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.TypeTranslationTest} returns this
 */
proto.micromova.proto.TypeTranslationTest.prototype.setCorrectScorePhrase = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 wrong_score_phrase = 8;
 * @return {number}
 */
proto.micromova.proto.TypeTranslationTest.prototype.getWrongScorePhrase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.TypeTranslationTest} returns this
 */
proto.micromova.proto.TypeTranslationTest.prototype.setWrongScorePhrase = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string example = 9;
 * @return {string}
 */
proto.micromova.proto.TypeTranslationTest.prototype.getExample = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.TypeTranslationTest} returns this
 */
proto.micromova.proto.TypeTranslationTest.prototype.setExample = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string mp3_url = 10;
 * @return {string}
 */
proto.micromova.proto.TypeTranslationTest.prototype.getMp3Url = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.TypeTranslationTest} returns this
 */
proto.micromova.proto.TypeTranslationTest.prototype.setMp3Url = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.micromova.proto.TypeSourceTest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.TypeSourceTest.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.TypeSourceTest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.TypeSourceTest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.TypeSourceTest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    translation: jspb.Message.getFieldWithDefault(msg, 2, ""),
    correctSourcesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    correctScoreUser: jspb.Message.getFieldWithDefault(msg, 4, 0),
    wrongScoreUser: jspb.Message.getFieldWithDefault(msg, 5, 0),
    correctScorePhrase: jspb.Message.getFieldWithDefault(msg, 6, 0),
    wrongScorePhrase: jspb.Message.getFieldWithDefault(msg, 7, 0),
    example: jspb.Message.getFieldWithDefault(msg, 8, ""),
    mp3Url: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.TypeSourceTest}
 */
proto.micromova.proto.TypeSourceTest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.TypeSourceTest;
  return proto.micromova.proto.TypeSourceTest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.TypeSourceTest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.TypeSourceTest}
 */
proto.micromova.proto.TypeSourceTest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranslation(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addCorrectSources(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCorrectScoreUser(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWrongScoreUser(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCorrectScorePhrase(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWrongScorePhrase(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setExample(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMp3Url(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.TypeSourceTest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.TypeSourceTest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.TypeSourceTest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.TypeSourceTest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getTranslation();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCorrectSourcesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getCorrectScoreUser();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getWrongScoreUser();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCorrectScorePhrase();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getWrongScorePhrase();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getExample();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMp3Url();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {string}
 */
proto.micromova.proto.TypeSourceTest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.TypeSourceTest} returns this
 */
proto.micromova.proto.TypeSourceTest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional string translation = 2;
 * @return {string}
 */
proto.micromova.proto.TypeSourceTest.prototype.getTranslation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.TypeSourceTest} returns this
 */
proto.micromova.proto.TypeSourceTest.prototype.setTranslation = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string correct_sources = 3;
 * @return {!Array<string>}
 */
proto.micromova.proto.TypeSourceTest.prototype.getCorrectSourcesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.micromova.proto.TypeSourceTest} returns this
 */
proto.micromova.proto.TypeSourceTest.prototype.setCorrectSourcesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.micromova.proto.TypeSourceTest} returns this
 */
proto.micromova.proto.TypeSourceTest.prototype.addCorrectSources = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.micromova.proto.TypeSourceTest} returns this
 */
proto.micromova.proto.TypeSourceTest.prototype.clearCorrectSourcesList = function() {
  return this.setCorrectSourcesList([]);
};


/**
 * optional int32 correct_score_user = 4;
 * @return {number}
 */
proto.micromova.proto.TypeSourceTest.prototype.getCorrectScoreUser = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.TypeSourceTest} returns this
 */
proto.micromova.proto.TypeSourceTest.prototype.setCorrectScoreUser = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 wrong_score_user = 5;
 * @return {number}
 */
proto.micromova.proto.TypeSourceTest.prototype.getWrongScoreUser = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.TypeSourceTest} returns this
 */
proto.micromova.proto.TypeSourceTest.prototype.setWrongScoreUser = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 correct_score_phrase = 6;
 * @return {number}
 */
proto.micromova.proto.TypeSourceTest.prototype.getCorrectScorePhrase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.TypeSourceTest} returns this
 */
proto.micromova.proto.TypeSourceTest.prototype.setCorrectScorePhrase = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 wrong_score_phrase = 7;
 * @return {number}
 */
proto.micromova.proto.TypeSourceTest.prototype.getWrongScorePhrase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.TypeSourceTest} returns this
 */
proto.micromova.proto.TypeSourceTest.prototype.setWrongScorePhrase = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string example = 8;
 * @return {string}
 */
proto.micromova.proto.TypeSourceTest.prototype.getExample = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.TypeSourceTest} returns this
 */
proto.micromova.proto.TypeSourceTest.prototype.setExample = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string mp3_url = 9;
 * @return {string}
 */
proto.micromova.proto.TypeSourceTest.prototype.getMp3Url = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.TypeSourceTest} returns this
 */
proto.micromova.proto.TypeSourceTest.prototype.setMp3Url = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.micromova.proto.Exam.repeatedFields_ = [1,2,3,4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.Exam.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.Exam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.Exam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.Exam.toObject = function(includeInstance, msg) {
  var f, obj = {
    selectTranslationTestsList: jspb.Message.toObjectList(msg.getSelectTranslationTestsList(),
    proto.micromova.proto.SelectTranslationTest.toObject, includeInstance),
    spellTestsList: jspb.Message.toObjectList(msg.getSpellTestsList(),
    proto.micromova.proto.SpellTest.toObject, includeInstance),
    typeTranslationTestsList: jspb.Message.toObjectList(msg.getTypeTranslationTestsList(),
    proto.micromova.proto.TypeTranslationTest.toObject, includeInstance),
    typeSourceTestsList: jspb.Message.toObjectList(msg.getTypeSourceTestsList(),
    proto.micromova.proto.TypeSourceTest.toObject, includeInstance),
    sourcePhrasesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    translationPhrasesList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    orderList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.Exam}
 */
proto.micromova.proto.Exam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.Exam;
  return proto.micromova.proto.Exam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.Exam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.Exam}
 */
proto.micromova.proto.Exam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.micromova.proto.SelectTranslationTest;
      reader.readMessage(value,proto.micromova.proto.SelectTranslationTest.deserializeBinaryFromReader);
      msg.addSelectTranslationTests(value);
      break;
    case 2:
      var value = new proto.micromova.proto.SpellTest;
      reader.readMessage(value,proto.micromova.proto.SpellTest.deserializeBinaryFromReader);
      msg.addSpellTests(value);
      break;
    case 3:
      var value = new proto.micromova.proto.TypeTranslationTest;
      reader.readMessage(value,proto.micromova.proto.TypeTranslationTest.deserializeBinaryFromReader);
      msg.addTypeTranslationTests(value);
      break;
    case 4:
      var value = new proto.micromova.proto.TypeSourceTest;
      reader.readMessage(value,proto.micromova.proto.TypeSourceTest.deserializeBinaryFromReader);
      msg.addTypeSourceTests(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addSourcePhrases(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addTranslationPhrases(value);
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addOrder(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.Exam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.Exam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.Exam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.Exam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectTranslationTestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.micromova.proto.SelectTranslationTest.serializeBinaryToWriter
    );
  }
  f = message.getSpellTestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.micromova.proto.SpellTest.serializeBinaryToWriter
    );
  }
  f = message.getTypeTranslationTestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.micromova.proto.TypeTranslationTest.serializeBinaryToWriter
    );
  }
  f = message.getTypeSourceTestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.micromova.proto.TypeSourceTest.serializeBinaryToWriter
    );
  }
  f = message.getSourcePhrasesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getTranslationPhrasesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getOrderList();
  if (f.length > 0) {
    writer.writePackedInt32(
      7,
      f
    );
  }
};


/**
 * repeated SelectTranslationTest select_translation_tests = 1;
 * @return {!Array<!proto.micromova.proto.SelectTranslationTest>}
 */
proto.micromova.proto.Exam.prototype.getSelectTranslationTestsList = function() {
  return /** @type{!Array<!proto.micromova.proto.SelectTranslationTest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.micromova.proto.SelectTranslationTest, 1));
};


/**
 * @param {!Array<!proto.micromova.proto.SelectTranslationTest>} value
 * @return {!proto.micromova.proto.Exam} returns this
*/
proto.micromova.proto.Exam.prototype.setSelectTranslationTestsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.micromova.proto.SelectTranslationTest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.micromova.proto.SelectTranslationTest}
 */
proto.micromova.proto.Exam.prototype.addSelectTranslationTests = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.micromova.proto.SelectTranslationTest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.micromova.proto.Exam} returns this
 */
proto.micromova.proto.Exam.prototype.clearSelectTranslationTestsList = function() {
  return this.setSelectTranslationTestsList([]);
};


/**
 * repeated SpellTest spell_tests = 2;
 * @return {!Array<!proto.micromova.proto.SpellTest>}
 */
proto.micromova.proto.Exam.prototype.getSpellTestsList = function() {
  return /** @type{!Array<!proto.micromova.proto.SpellTest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.micromova.proto.SpellTest, 2));
};


/**
 * @param {!Array<!proto.micromova.proto.SpellTest>} value
 * @return {!proto.micromova.proto.Exam} returns this
*/
proto.micromova.proto.Exam.prototype.setSpellTestsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.micromova.proto.SpellTest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.micromova.proto.SpellTest}
 */
proto.micromova.proto.Exam.prototype.addSpellTests = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.micromova.proto.SpellTest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.micromova.proto.Exam} returns this
 */
proto.micromova.proto.Exam.prototype.clearSpellTestsList = function() {
  return this.setSpellTestsList([]);
};


/**
 * repeated TypeTranslationTest type_translation_tests = 3;
 * @return {!Array<!proto.micromova.proto.TypeTranslationTest>}
 */
proto.micromova.proto.Exam.prototype.getTypeTranslationTestsList = function() {
  return /** @type{!Array<!proto.micromova.proto.TypeTranslationTest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.micromova.proto.TypeTranslationTest, 3));
};


/**
 * @param {!Array<!proto.micromova.proto.TypeTranslationTest>} value
 * @return {!proto.micromova.proto.Exam} returns this
*/
proto.micromova.proto.Exam.prototype.setTypeTranslationTestsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.micromova.proto.TypeTranslationTest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.micromova.proto.TypeTranslationTest}
 */
proto.micromova.proto.Exam.prototype.addTypeTranslationTests = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.micromova.proto.TypeTranslationTest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.micromova.proto.Exam} returns this
 */
proto.micromova.proto.Exam.prototype.clearTypeTranslationTestsList = function() {
  return this.setTypeTranslationTestsList([]);
};


/**
 * repeated TypeSourceTest type_source_tests = 4;
 * @return {!Array<!proto.micromova.proto.TypeSourceTest>}
 */
proto.micromova.proto.Exam.prototype.getTypeSourceTestsList = function() {
  return /** @type{!Array<!proto.micromova.proto.TypeSourceTest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.micromova.proto.TypeSourceTest, 4));
};


/**
 * @param {!Array<!proto.micromova.proto.TypeSourceTest>} value
 * @return {!proto.micromova.proto.Exam} returns this
*/
proto.micromova.proto.Exam.prototype.setTypeSourceTestsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.micromova.proto.TypeSourceTest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.micromova.proto.TypeSourceTest}
 */
proto.micromova.proto.Exam.prototype.addTypeSourceTests = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.micromova.proto.TypeSourceTest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.micromova.proto.Exam} returns this
 */
proto.micromova.proto.Exam.prototype.clearTypeSourceTestsList = function() {
  return this.setTypeSourceTestsList([]);
};


/**
 * repeated string source_phrases = 5;
 * @return {!Array<string>}
 */
proto.micromova.proto.Exam.prototype.getSourcePhrasesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.micromova.proto.Exam} returns this
 */
proto.micromova.proto.Exam.prototype.setSourcePhrasesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.micromova.proto.Exam} returns this
 */
proto.micromova.proto.Exam.prototype.addSourcePhrases = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.micromova.proto.Exam} returns this
 */
proto.micromova.proto.Exam.prototype.clearSourcePhrasesList = function() {
  return this.setSourcePhrasesList([]);
};


/**
 * repeated string translation_phrases = 6;
 * @return {!Array<string>}
 */
proto.micromova.proto.Exam.prototype.getTranslationPhrasesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.micromova.proto.Exam} returns this
 */
proto.micromova.proto.Exam.prototype.setTranslationPhrasesList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.micromova.proto.Exam} returns this
 */
proto.micromova.proto.Exam.prototype.addTranslationPhrases = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.micromova.proto.Exam} returns this
 */
proto.micromova.proto.Exam.prototype.clearTranslationPhrasesList = function() {
  return this.setTranslationPhrasesList([]);
};


/**
 * repeated int32 order = 7;
 * @return {!Array<number>}
 */
proto.micromova.proto.Exam.prototype.getOrderList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.micromova.proto.Exam} returns this
 */
proto.micromova.proto.Exam.prototype.setOrderList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.micromova.proto.Exam} returns this
 */
proto.micromova.proto.Exam.prototype.addOrder = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.micromova.proto.Exam} returns this
 */
proto.micromova.proto.Exam.prototype.clearOrderList = function() {
  return this.setOrderList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.micromova.proto.TaskResult.prototype.toObject = function(opt_includeInstance) {
  return proto.micromova.proto.TaskResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.micromova.proto.TaskResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.TaskResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    userScore: jspb.Message.getFieldWithDefault(msg, 2, 0),
    phraseScore: jspb.Message.getFieldWithDefault(msg, 3, 0),
    isCorrectAnswer: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.micromova.proto.TaskResult}
 */
proto.micromova.proto.TaskResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.micromova.proto.TaskResult;
  return proto.micromova.proto.TaskResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.micromova.proto.TaskResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.micromova.proto.TaskResult}
 */
proto.micromova.proto.TaskResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserScore(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPhraseScore(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsCorrectAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.micromova.proto.TaskResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.micromova.proto.TaskResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.micromova.proto.TaskResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.micromova.proto.TaskResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getUserScore();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPhraseScore();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIsCorrectAnswer();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {string}
 */
proto.micromova.proto.TaskResult.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.micromova.proto.TaskResult} returns this
 */
proto.micromova.proto.TaskResult.prototype.setId = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional int32 user_score = 2;
 * @return {number}
 */
proto.micromova.proto.TaskResult.prototype.getUserScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.TaskResult} returns this
 */
proto.micromova.proto.TaskResult.prototype.setUserScore = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 phrase_score = 3;
 * @return {number}
 */
proto.micromova.proto.TaskResult.prototype.getPhraseScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.micromova.proto.TaskResult} returns this
 */
proto.micromova.proto.TaskResult.prototype.setPhraseScore = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool is_correct_answer = 4;
 * @return {boolean}
 */
proto.micromova.proto.TaskResult.prototype.getIsCorrectAnswer = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.micromova.proto.TaskResult} returns this
 */
proto.micromova.proto.TaskResult.prototype.setIsCorrectAnswer = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.micromova.proto.TestType = {
  UNKNOWN_TEST_TYPE: 0,
  SELECT_TRANSLATION_SHOW_PHRASE: 1,
  SELECT_TRANSLATION_HIDE_PHRASE: 2,
  SPELL: 3,
  TYPE_TRANSLATION_SHOW_PHRASE: 4,
  TYPE_TRANSLATION_HIDE_PHRASE: 5,
  TYPE_SOURCE: 6
};

goog.object.extend(exports, proto.micromova.proto);
